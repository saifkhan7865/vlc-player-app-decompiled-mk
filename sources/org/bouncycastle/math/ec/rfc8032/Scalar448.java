package org.bouncycastle.math.ec.rfc8032;

import kotlinx.coroutines.internal.LockFreeTaskQueueCore;
import org.bouncycastle.math.raw.Nat;
import org.bouncycastle.math.raw.Nat448;

abstract class Scalar448 {
    private static final int[] L = {-1420278541, 595116690, -1916432555, 560775794, -1361693040, -1001465015, 2093622249, -1, -1, -1, -1, -1, -1, LockFreeTaskQueueCore.MAX_CAPACITY_MASK};
    private static final int L4_0 = 43969588;
    private static final int L4_1 = 30366549;
    private static final int L4_2 = 163752818;
    private static final int L4_3 = 258169998;
    private static final int L4_4 = 96434764;
    private static final int L4_5 = 227822194;
    private static final int L4_6 = 149865618;
    private static final int L4_7 = 550336261;
    private static final int[] LSq = {463601321, -1045562440, 1239460018, -1189350089, -412821483, 1160071467, -1564970643, 1256291574, -1170454588, -240530412, 2118977290, -1845154869, -1618855054, -1019204973, 1437344377, -1849925303, 1189267370, 280387897, -680846520, -500732508, -1100672524, -1, -1, -1, -1, -1, -1, 268435455};
    private static final int L_0 = 78101261;
    private static final int L_1 = 141809365;
    private static final int L_2 = 175155932;
    private static final int L_3 = 64542499;
    private static final int L_4 = 158326419;
    private static final int L_5 = 191173276;
    private static final int L_6 = 104575268;
    private static final int L_7 = 137584065;
    private static final long M26L = 67108863;
    private static final long M28L = 268435455;
    private static final long M32L = 4294967295L;
    private static final int SCALAR_BYTES = 57;
    static final int SIZE = 14;
    private static final int TARGET_LENGTH = 447;

    Scalar448() {
    }

    static boolean checkVar(byte[] bArr, int[] iArr) {
        if (bArr[56] != 0) {
            return false;
        }
        decode(bArr, iArr);
        return !Nat.gte(14, iArr, L);
    }

    static void decode(byte[] bArr, int[] iArr) {
        Codec.decode32(bArr, 0, iArr, 0, 14);
    }

    static void getOrderWnafVar(int i, byte[] bArr) {
        Wnaf.getSignedVar(L, i, bArr);
    }

    static void multiply225Var(int[] iArr, int[] iArr2, int[] iArr3) {
        int[] iArr4 = new int[22];
        Nat.mul(iArr2, 0, 8, iArr, 0, 14, iArr4, 0);
        if (iArr2[7] < 0) {
            Nat.addTo(14, L, 0, iArr4, 8);
            Nat.subFrom(14, iArr, 0, iArr4, 8);
        }
        byte[] bArr = new byte[88];
        Codec.encode32(iArr4, 0, 22, bArr, 0);
        decode(reduce704(bArr), iArr3);
    }

    static byte[] reduce704(byte[] bArr) {
        byte[] bArr2 = bArr;
        long decode32 = ((long) Codec.decode32(bArr2, 7)) & 4294967295L;
        long decode24 = ((long) (Codec.decode24(bArr2, 32) << 4)) & 4294967295L;
        long decode322 = ((long) Codec.decode32(bArr2, 35)) & 4294967295L;
        long decode323 = ((long) Codec.decode32(bArr2, 42)) & 4294967295L;
        long decode242 = ((long) (Codec.decode24(bArr2, 46) << 4)) & 4294967295L;
        long decode243 = ((long) (Codec.decode24(bArr2, 18) << 4)) & 4294967295L;
        long decode324 = ((long) Codec.decode32(bArr2, 21)) & 4294967295L;
        long decode325 = ((long) Codec.decode32(bArr2, 28)) & 4294967295L;
        long decode244 = (long) (Codec.decode24(bArr2, 60) << 4);
        long j = decode244 & 4294967295L;
        long j2 = decode244;
        long decode326 = ((long) Codec.decode32(bArr2, 63)) & 4294967295L;
        long decode245 = ((long) (Codec.decode24(bArr2, 67) << 4)) & 4294967295L;
        long decode327 = (long) Codec.decode32(bArr2, 70);
        long j3 = decode327 & 4294967295L;
        long j4 = decode327;
        long decode246 = ((long) (Codec.decode24(bArr2, 74) << 4)) & 4294967295L;
        long decode328 = ((long) Codec.decode32(bArr2, 77)) & 4294967295L;
        long decode247 = ((long) (Codec.decode24(bArr2, 81) << 4)) & 4294967295L;
        long decode329 = (long) Codec.decode32(bArr2, 84);
        long j5 = (4294967295L & decode329) >>> 28;
        long j6 = decode329 & M28L;
        long decode3210 = (((long) Codec.decode32(bArr2, 56)) & 4294967295L) + (j5 * 550336261);
        long j7 = decode246 + (j3 >>> 28);
        long j8 = j4 & M28L;
        long j9 = decode328 + (j7 >>> 28);
        long j10 = j7 & M28L;
        long j11 = decode247 + (j9 >>> 28);
        long j12 = j9 & M28L;
        long j13 = j6 + (j11 >>> 28);
        long j14 = j11 & M28L;
        long j15 = decode325 + (j13 * 43969588);
        long j16 = decode24 + (j5 * 43969588) + (j13 * 30366549);
        long j17 = decode322 + (j5 * 30366549) + (j13 * 163752818);
        long decode248 = (((long) (Codec.decode24(bArr2, 39) << 4)) & 4294967295L) + (j5 * 163752818) + (j13 * 258169998);
        long j18 = decode323 + (j5 * 258169998) + (j13 * 96434764);
        long j19 = decode242 + (j5 * 96434764) + (j13 * 227822194);
        long decode249 = (((long) (Codec.decode24(bArr2, 53) << 4)) & 4294967295L) + (j5 * 149865618) + (j13 * 550336261);
        long decode2410 = (((long) (Codec.decode24(bArr2, 25) << 4)) & 4294967295L) + (j14 * 43969588);
        long j20 = j15 + (j14 * 30366549);
        long j21 = j16 + (j14 * 163752818);
        long j22 = j17 + (j14 * 258169998);
        long j23 = decode248 + (j14 * 96434764);
        long j24 = j18 + (j14 * 227822194);
        long j25 = j19 + (j14 * 149865618);
        long decode3211 = (((long) Codec.decode32(bArr2, 49)) & 4294967295L) + (j5 * 227822194) + (j13 * 149865618) + (j14 * 550336261);
        long j26 = decode324 + (j12 * 43969588);
        long j27 = decode326 + (j >>> 28);
        long j28 = j2 & M28L;
        long j29 = decode245 + (j27 >>> 28);
        long j30 = j27 & M28L;
        long j31 = j8 + (j29 >>> 28);
        long j32 = j29 & M28L;
        long j33 = j10 + (j31 >>> 28);
        long j34 = j31 & M28L;
        long decode3212 = (((long) Codec.decode32(bArr2, 14)) & 4294967295L) + (j34 * 43969588);
        long decode2411 = (((long) (Codec.decode24(bArr2, 11) << 4)) & 4294967295L) + (j32 * 43969588);
        long j35 = decode3212 + (j32 * 30366549);
        long j36 = decode243 + (j33 * 43969588) + (j34 * 30366549) + (j32 * 163752818);
        long j37 = j26 + (j33 * 30366549) + (j34 * 163752818) + (j32 * 258169998);
        long j38 = decode2410 + (j12 * 30366549) + (j33 * 163752818) + (j34 * 258169998) + (j32 * 96434764);
        long j39 = j20 + (j12 * 163752818) + (j33 * 258169998) + (j34 * 96434764) + (j32 * 227822194);
        long j40 = j21 + (j12 * 258169998) + (j33 * 96434764) + (j34 * 227822194) + (j32 * 149865618);
        long j41 = j22 + (j12 * 96434764) + (j33 * 227822194) + (j34 * 149865618) + (j32 * 550336261);
        long j42 = decode249 + (decode3211 >>> 28);
        long j43 = decode3211 & M28L;
        long j44 = decode3210 + (j42 >>> 28);
        long j45 = j42 & M28L;
        long j46 = j28 + (j44 >>> 28);
        long j47 = j44 & M28L;
        long j48 = j30 + (j46 >>> 28);
        long j49 = j46 & M28L;
        long j50 = j42 & M26L;
        long j51 = (j47 * 4) + (j45 >>> 26) + 1;
        long decode3213 = (((long) Codec.decode32(bArr2, 0)) & 4294967295L) + (78101261 * j51);
        long decode2412 = (((long) (Codec.decode24(bArr2, 4) << 4)) & 4294967295L) + (43969588 * j49) + (141809365 * j51) + (decode3213 >>> 28);
        long j52 = decode3213 & M28L;
        long j53 = decode32 + (j48 * 43969588) + (30366549 * j49) + (175155932 * j51) + (decode2412 >>> 28);
        long j54 = decode2412 & M28L;
        long j55 = decode2411 + (j48 * 30366549) + (163752818 * j49) + (64542499 * j51) + (j53 >>> 28);
        long j56 = j53 & M28L;
        long j57 = j35 + (j48 * 163752818) + (258169998 * j49) + (158326419 * j51) + (j55 >>> 28);
        long j58 = j55 & M28L;
        long j59 = j36 + (j48 * 258169998) + (96434764 * j49) + (191173276 * j51) + (j57 >>> 28);
        long j60 = j57 & M28L;
        long j61 = j37 + (j48 * 96434764) + (227822194 * j49) + (104575268 * j51) + (j59 >>> 28);
        long j62 = j59 & M28L;
        long j63 = j38 + (j48 * 227822194) + (149865618 * j49) + (j51 * 137584065) + (j61 >>> 28);
        long j64 = j61 & M28L;
        long j65 = j39 + (j48 * 149865618) + (j49 * 550336261) + (j63 >>> 28);
        long j66 = j63 & M28L;
        long j67 = j40 + (j48 * 550336261) + (j65 >>> 28);
        long j68 = j65 & M28L;
        long j69 = j41 + (j67 >>> 28);
        long j70 = j67 & M28L;
        long j71 = j23 + (j12 * 227822194) + (j33 * 149865618) + (j34 * 550336261) + (j69 >>> 28);
        long j72 = j69 & M28L;
        long j73 = j24 + (j12 * 149865618) + (j33 * 550336261) + (j71 >>> 28);
        long j74 = j71 & M28L;
        long j75 = j25 + (j12 * 550336261) + (j73 >>> 28);
        long j76 = j73 & M28L;
        long j77 = j43 + (j75 >>> 28);
        long j78 = j75 & M28L;
        long j79 = j50 + (j77 >>> 28);
        long j80 = j77 & M28L;
        long j81 = j79 >>> 26;
        long j82 = j79 & M26L;
        long j83 = j81 - 1;
        long j84 = j52 - (j83 & 78101261);
        long j85 = j56 - (j83 & 175155932);
        long j86 = j58 - (j83 & 64542499);
        long j87 = j60 - (j83 & 158326419);
        long j88 = j62 - (j83 & 191173276);
        long j89 = j66 - (j83 & 137584065);
        long j90 = (j54 - (j83 & 141809365)) + (j84 >> 28);
        long j91 = j84 & M28L;
        long j92 = j85 + (j90 >> 28);
        long j93 = j90 & M28L;
        long j94 = j86 + (j92 >> 28);
        long j95 = j92 & M28L;
        long j96 = j87 + (j94 >> 28);
        long j97 = j94 & M28L;
        long j98 = j88 + (j96 >> 28);
        long j99 = j96 & M28L;
        long j100 = (j64 - (j83 & 104575268)) + (j98 >> 28);
        long j101 = j98 & M28L;
        long j102 = j89 + (j100 >> 28);
        long j103 = j100 & M28L;
        long j104 = j68 + (j102 >> 28);
        long j105 = j102 & M28L;
        long j106 = j70 + (j104 >> 28);
        long j107 = j104 & M28L;
        long j108 = j72 + (j106 >> 28);
        long j109 = j106 & M28L;
        long j110 = j74 + (j108 >> 28);
        long j111 = j108 & M28L;
        long j112 = j76 + (j110 >> 28);
        long j113 = j110 & M28L;
        long j114 = j78 + (j112 >> 28);
        long j115 = j112 & M28L;
        long j116 = j80 + (j114 >> 28);
        long j117 = j114 & M28L;
        long j118 = j116 & M28L;
        byte[] bArr3 = new byte[57];
        Codec.encode56(j91 | (j93 << 28), bArr3, 0);
        Codec.encode56(j95 | (j97 << 28), bArr3, 7);
        Codec.encode56(j99 | (j101 << 28), bArr3, 14);
        Codec.encode56(j103 | (j105 << 28), bArr3, 21);
        Codec.encode56(j107 | (j109 << 28), bArr3, 28);
        Codec.encode56(j111 | (j113 << 28), bArr3, 35);
        Codec.encode56(j115 | (j117 << 28), bArr3, 42);
        Codec.encode56(((j82 + (j116 >> 28)) << 28) | j118, bArr3, 49);
        return bArr3;
    }

    static byte[] reduce912(byte[] bArr) {
        byte[] bArr2 = bArr;
        long decode32 = ((long) Codec.decode32(bArr2, 7)) & 4294967295L;
        long decode24 = ((long) (Codec.decode24(bArr2, 32) << 4)) & 4294967295L;
        long decode242 = ((long) (Codec.decode24(bArr2, 11) << 4)) & 4294967295L;
        long decode322 = ((long) Codec.decode32(bArr2, 35)) & 4294967295L;
        long decode323 = ((long) Codec.decode32(bArr2, 42)) & 4294967295L;
        long decode243 = ((long) (Codec.decode24(bArr2, 46) << 4)) & 4294967295L;
        long decode244 = ((long) (Codec.decode24(bArr2, 18) << 4)) & 4294967295L;
        long decode324 = ((long) Codec.decode32(bArr2, 21)) & 4294967295L;
        long decode325 = ((long) Codec.decode32(bArr2, 28)) & 4294967295L;
        long decode245 = ((long) (Codec.decode24(bArr2, 39) << 4)) & 4294967295L;
        long decode246 = ((long) (Codec.decode24(bArr2, 53) << 4)) & 4294967295L;
        long decode326 = ((long) Codec.decode32(bArr2, 70)) & 4294967295L;
        long decode247 = ((long) (Codec.decode24(bArr2, 74) << 4)) & 4294967295L;
        long decode327 = ((long) Codec.decode32(bArr2, 77)) & 4294967295L;
        long decode248 = ((long) (Codec.decode24(bArr2, 81) << 4)) & 4294967295L;
        long decode328 = (long) Codec.decode32(bArr2, 84);
        long j = decode328 & 4294967295L;
        long j2 = decode328;
        long decode249 = ((long) (Codec.decode24(bArr2, 88) << 4)) & 4294967295L;
        long decode329 = (long) Codec.decode32(bArr2, 91);
        long j3 = decode329 & 4294967295L;
        long j4 = decode329;
        long decode2410 = ((long) (Codec.decode24(bArr2, 95) << 4)) & 4294967295L;
        long decode3210 = (long) Codec.decode32(bArr2, 98);
        long j5 = decode3210 & 4294967295L;
        long j6 = decode3210;
        long decode2411 = ((long) (Codec.decode24(bArr2, 102) << 4)) & 4294967295L;
        long decode3211 = (long) Codec.decode32(bArr2, 105);
        long decode16 = ((long) Codec.decode16(bArr2, 112)) & 4294967295L;
        long j7 = decode248 + (decode16 * 550336261);
        long decode2412 = (((long) (Codec.decode24(bArr2, 109) << 4)) & 4294967295L) + ((decode3211 & 4294967295L) >>> 28);
        long j8 = decode3211 & M28L;
        long decode3212 = (((long) Codec.decode32(bArr2, 56)) & 4294967295L) + (decode16 * 43969588) + (decode2412 * 30366549);
        long decode2413 = (((long) (Codec.decode24(bArr2, 60) << 4)) & 4294967295L) + (decode16 * 30366549) + (decode2412 * 163752818);
        long decode3213 = (((long) Codec.decode32(bArr2, 63)) & 4294967295L) + (decode16 * 163752818) + (decode2412 * 258169998);
        long decode2414 = (((long) (Codec.decode24(bArr2, 67) << 4)) & 4294967295L) + (decode16 * 258169998) + (decode2412 * 96434764);
        long j9 = decode327 + (decode16 * 149865618) + (decode2412 * 550336261);
        long decode3214 = (((long) Codec.decode32(bArr2, 49)) & 4294967295L) + (j8 * 43969588);
        long j10 = decode2411 + (j5 >>> 28);
        long j11 = j6 & M28L;
        long j12 = decode326 + (decode16 * 96434764) + (decode2412 * 227822194) + (j8 * 149865618) + (j10 * 550336261);
        long j13 = decode2410 + (j3 >>> 28);
        long j14 = j4 & M28L;
        long j15 = decode3213 + (j8 * 96434764) + (j10 * 227822194) + (j11 * 149865618) + (j13 * 550336261);
        long j16 = decode2413 + (j8 * 258169998) + (j10 * 96434764) + (j11 * 227822194) + (j13 * 149865618) + (j14 * 550336261);
        long j17 = decode249 + (j >>> 28);
        long j18 = j2 & M28L;
        long j19 = decode247 + (decode16 * 227822194) + (decode2412 * 149865618) + (j8 * 550336261) + (j12 >>> 28);
        long j20 = j12 & M28L;
        long j21 = j9 + (j19 >>> 28);
        long j22 = j19 & M28L;
        long j23 = j7 + (j21 >>> 28);
        long j24 = j21 & M28L;
        long j25 = j18 + (j23 >>> 28);
        long j26 = j23 & M28L;
        long decode2415 = (((long) (Codec.decode24(bArr2, 25) << 4)) & 4294967295L) + (j26 * 43969588);
        long j27 = decode325 + (j25 * 43969588) + (j26 * 30366549);
        long j28 = decode24 + (j17 * 43969588) + (j25 * 30366549) + (j26 * 163752818);
        long j29 = decode322 + (j14 * 43969588) + (j17 * 30366549) + (j25 * 163752818) + (j26 * 258169998);
        long j30 = decode245 + (j13 * 43969588) + (j14 * 30366549) + (j17 * 163752818) + (j25 * 258169998) + (j26 * 96434764);
        long j31 = decode323 + (j11 * 43969588) + (j13 * 30366549) + (j14 * 163752818) + (j17 * 258169998) + (j25 * 96434764) + (j26 * 227822194);
        long j32 = decode3214 + (j10 * 30366549) + (j11 * 163752818) + (j13 * 258169998) + (j14 * 96434764) + (j17 * 227822194) + (j25 * 149865618) + (j26 * 550336261);
        long j33 = decode324 + (j24 * 43969588);
        long j34 = decode243 + (j10 * 43969588) + (j11 * 30366549) + (j13 * 163752818) + (j14 * 258169998) + (j17 * 96434764) + (j25 * 227822194) + (j26 * 149865618) + (j24 * 550336261);
        long j35 = j15 + (j16 >>> 28);
        long j36 = j16 & M28L;
        long j37 = decode2414 + (j8 * 227822194) + (j10 * 149865618) + (j11 * 550336261) + (j35 >>> 28);
        long j38 = j35 & M28L;
        long j39 = j20 + (j37 >>> 28);
        long j40 = j37 & M28L;
        long j41 = j22 + (j39 >>> 28);
        long j42 = j39 & M28L;
        long decode3215 = (((long) Codec.decode32(bArr2, 14)) & 4294967295L) + (j42 * 43969588);
        long j43 = decode242 + (j40 * 43969588);
        long j44 = decode3215 + (j40 * 30366549);
        long j45 = decode244 + (j41 * 43969588) + (j42 * 30366549) + (j40 * 163752818);
        long j46 = j33 + (j41 * 30366549) + (j42 * 163752818) + (j40 * 258169998);
        long j47 = decode2415 + (j24 * 30366549) + (j41 * 163752818) + (j42 * 258169998) + (j40 * 96434764);
        long j48 = j27 + (j24 * 163752818) + (j41 * 258169998) + (j42 * 96434764) + (j40 * 227822194);
        long j49 = j28 + (j24 * 258169998) + (j41 * 96434764) + (j42 * 227822194) + (j40 * 149865618);
        long j50 = j29 + (j24 * 96434764) + (j41 * 227822194) + (j42 * 149865618) + (j40 * 550336261);
        long j51 = decode246 + (decode2412 * 43969588) + (j8 * 30366549) + (j10 * 163752818) + (j11 * 258169998) + (j13 * 96434764) + (j14 * 227822194) + (j17 * 149865618) + (j25 * 550336261) + (j32 >>> 28);
        long j52 = j32 & M28L;
        long j53 = decode3212 + (j8 * 163752818) + (j10 * 258169998) + (j11 * 96434764) + (j13 * 227822194) + (j14 * 149865618) + (j17 * 550336261) + (j51 >>> 28);
        long j54 = j51 & M28L;
        long j55 = j36 + (j53 >>> 28);
        long j56 = j53 & M28L;
        long j57 = j38 + (j55 >>> 28);
        long j58 = j55 & M28L;
        long j59 = decode32 + (j57 * 43969588);
        long j60 = j43 + (j57 * 30366549);
        long j61 = j44 + (j57 * 163752818);
        long j62 = j46 + (j57 * 96434764);
        long j63 = j47 + (j57 * 227822194);
        long j64 = j49 + (j57 * 550336261);
        long j65 = j51 & M26L;
        long j66 = (j56 * 4) + (j54 >>> 26) + 1;
        long decode3216 = (((long) Codec.decode32(bArr2, 0)) & 4294967295L) + (78101261 * j66);
        long decode2416 = (((long) (Codec.decode24(bArr2, 4) << 4)) & 4294967295L) + (43969588 * j58) + (141809365 * j66) + (decode3216 >>> 28);
        long j67 = decode3216 & M28L;
        long j68 = j59 + (30366549 * j58) + (175155932 * j66) + (decode2416 >>> 28);
        long j69 = decode2416 & M28L;
        long j70 = j60 + (163752818 * j58) + (64542499 * j66) + (j68 >>> 28);
        long j71 = j68 & M28L;
        long j72 = j61 + (258169998 * j58) + (158326419 * j66) + (j70 >>> 28);
        long j73 = j70 & M28L;
        long j74 = j45 + (j57 * 258169998) + (96434764 * j58) + (191173276 * j66) + (j72 >>> 28);
        long j75 = j72 & M28L;
        long j76 = j62 + (227822194 * j58) + (104575268 * j66) + (j74 >>> 28);
        long j77 = j74 & M28L;
        long j78 = j63 + (149865618 * j58) + (j66 * 137584065) + (j76 >>> 28);
        long j79 = j76 & M28L;
        long j80 = j48 + (j57 * 149865618) + (j58 * 550336261) + (j78 >>> 28);
        long j81 = j78 & M28L;
        long j82 = j64 + (j80 >>> 28);
        long j83 = j80 & M28L;
        long j84 = j50 + (j82 >>> 28);
        long j85 = j82 & M28L;
        long j86 = j30 + (j24 * 227822194) + (j41 * 149865618) + (j42 * 550336261) + (j84 >>> 28);
        long j87 = j84 & M28L;
        long j88 = j31 + (j24 * 149865618) + (j41 * 550336261) + (j86 >>> 28);
        long j89 = j86 & M28L;
        long j90 = j34 + (j88 >>> 28);
        long j91 = j88 & M28L;
        long j92 = j52 + (j90 >>> 28);
        long j93 = j90 & M28L;
        long j94 = j65 + (j92 >>> 28);
        long j95 = j92 & M28L;
        long j96 = M26L & j94;
        long j97 = (j94 >>> 26) - 1;
        long j98 = j67 - (78101261 & j97);
        long j99 = (j69 - (141809365 & j97)) + (j98 >> 28);
        long j100 = j98 & M28L;
        long j101 = (j71 - (175155932 & j97)) + (j99 >> 28);
        long j102 = j99 & M28L;
        long j103 = (j73 - (64542499 & j97)) + (j101 >> 28);
        long j104 = j101 & M28L;
        long j105 = (j75 - (158326419 & j97)) + (j103 >> 28);
        long j106 = j103 & M28L;
        long j107 = (j77 - (191173276 & j97)) + (j105 >> 28);
        long j108 = j105 & M28L;
        long j109 = (j79 - (104575268 & j97)) + (j107 >> 28);
        long j110 = j107 & M28L;
        long j111 = (j81 - (j97 & 137584065)) + (j109 >> 28);
        long j112 = j109 & M28L;
        long j113 = j83 + (j111 >> 28);
        long j114 = j111 & M28L;
        long j115 = j85 + (j113 >> 28);
        long j116 = j113 & M28L;
        long j117 = j87 + (j115 >> 28);
        long j118 = j115 & M28L;
        long j119 = j89 + (j117 >> 28);
        long j120 = j117 & M28L;
        long j121 = j91 + (j119 >> 28);
        long j122 = j119 & M28L;
        long j123 = j93 + (j121 >> 28);
        long j124 = j121 & M28L;
        long j125 = j95 + (j123 >> 28);
        long j126 = j123 & M28L;
        long j127 = j125 & M28L;
        byte[] bArr3 = new byte[57];
        Codec.encode56((j102 << 28) | j100, bArr3, 0);
        Codec.encode56((j106 << 28) | j104, bArr3, 7);
        Codec.encode56(j108 | (j110 << 28), bArr3, 14);
        Codec.encode56(j112 | (j114 << 28), bArr3, 21);
        Codec.encode56(j116 | (j118 << 28), bArr3, 28);
        Codec.encode56(j120 | (j122 << 28), bArr3, 35);
        Codec.encode56(j124 | (j126 << 28), bArr3, 42);
        Codec.encode56(((j96 + (j125 >> 28)) << 28) | j127, bArr3, 49);
        return bArr3;
    }

    static void reduceBasisVar(int[] iArr, int[] iArr2, int[] iArr3) {
        int[] iArr4 = iArr;
        int[] iArr5 = new int[28];
        System.arraycopy(LSq, 0, iArr5, 0, 28);
        int[] iArr6 = new int[28];
        Nat448.square(iArr4, iArr6);
        iArr6[0] = iArr6[0] + 1;
        int[] iArr7 = new int[28];
        int[] iArr8 = L;
        Nat448.mul(iArr8, iArr4, iArr7);
        int[] iArr9 = new int[8];
        System.arraycopy(iArr8, 0, iArr9, 0, 8);
        int[] iArr10 = new int[8];
        int[] iArr11 = new int[8];
        System.arraycopy(iArr4, 0, iArr11, 0, 8);
        int[] iArr12 = new int[8];
        iArr12[0] = 1;
        int i = 27;
        int bitLengthPositive = ScalarUtil.getBitLengthPositive(27, iArr6);
        while (bitLengthPositive > TARGET_LENGTH) {
            int bitLength = ScalarUtil.getBitLength(i, iArr7) - bitLengthPositive;
            int i2 = ((bitLength >> 31) ^ -1) & bitLength;
            if (iArr7[i] < 0) {
                ScalarUtil.addShifted_NP(i, i2, iArr5, iArr6, iArr7);
                ScalarUtil.addShifted_UV(7, i2, iArr9, iArr10, iArr11, iArr12);
            } else {
                ScalarUtil.subShifted_NP(i, i2, iArr5, iArr6, iArr7);
                ScalarUtil.subShifted_UV(7, i2, iArr9, iArr10, iArr11, iArr12);
            }
            if (ScalarUtil.lessThan(i, iArr5, iArr6)) {
                i = bitLengthPositive >>> 5;
                bitLengthPositive = ScalarUtil.getBitLengthPositive(i, iArr5);
                int[] iArr13 = iArr10;
                iArr10 = iArr12;
                iArr12 = iArr13;
                int[] iArr14 = iArr6;
                iArr6 = iArr5;
                iArr5 = iArr14;
                int[] iArr15 = iArr11;
                iArr11 = iArr9;
                iArr9 = iArr15;
            }
        }
        System.arraycopy(iArr11, 0, iArr2, 0, 8);
        System.arraycopy(iArr12, 0, iArr3, 0, 8);
    }

    static void toSignedDigits(int i, int[] iArr, int[] iArr2) {
        iArr2[14] = (1 << (i - 448)) + Nat.cadd(14, 1 & (iArr[0] ^ -1), iArr, L, iArr2);
        Nat.shiftDownBit(15, iArr2, 0);
    }
}
